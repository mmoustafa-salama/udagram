
service: serverless-udagram-app
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  environment:
    USERS_TABLE: Users-${self:provider.stage}
    USERS_INDEX_NAME: UserEmailIndex
    FEEDITEMS_TABLE: FeedItems-${self:provider.stage}
    FEEDITEMS_INDEX_NAME: FeedItemIdIndex
    FEEDITEM_LIKES_TABLE: FeedItemLikes-${self:provider.stage}
    FEEDITEM_LIKES_INDEX_NAME: FeedItemLikesIndex
    FEEDITEM_COMMENTS_TABLE: FeedItemComments-${self:provider.stage}
    FEEDITEM_COMMENTS_INDEX_NAME: FeedItemCommentIndex
    FEEDITEM_IMAGES_S3_BUCKET: my-serverless-udagram-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless udagram (instagram-like image sharing) application
    models:
      - name: LoginRequest
        contentType: application/json
        schema: ${file(src/requests/validators/auth/login-request.json)}
      - name: RegisterRequest
        contentType: application/json
        schema: ${file(src/requests/validators/auth/register-request.json)}
      - name: CreateFeedItemRequest
        contentType: application/json
        schema: ${file(src/requests/validators/create-feed-item-request.json)}
      - name: UpdateFeedItemRequest
        contentType: application/json
        schema: ${file(src/requests/validators/update-feed-item-request.json)}

functions:
  
  Auth:
    handler: src/lambda/auth/customAuthorizer.handler

  # Configure Login function
  Login:
    handler: src/lambda/auth/login.handler
    events:
      - http:
          method: post
          path: users/login
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Athenticate a user using email and password 
            description: Athenticate a user using email and password
            requestModels:
              'application/json': LoginRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_INDEX_NAME}
  
  # Configure Register function
  Register:
    handler: src/lambda/auth/register.handler
    events:
      - http:
          method: post
          path: users/register
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Register a new user
            description: Register a new user
            requestModels:
              'application/json': RegisterRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_INDEX_NAME}
        
  # Configure GetFeedItems function
  GetFeeds:
    handler: src/lambda/http/getFeedItems.handler
    events:
      - http:
          method: get
          path: feeds
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEEDITEMS_TABLE}

  # Configure CreateFeedItem function
  CreateFeed:
    handler: src/lambda/http/createFeedItem.handler
    events:
      - http:
          method: post
          path: feeds
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new feed item
            description: Create a new feed item
            requestModels:
              'application/json': CreateFeedItemRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEEDITEMS_TABLE}

  # Configure UpdateFeedItem function
  UpdateFeed:
    handler: src/lambda/http/updateFeedItem.handler
    events:
      - http:
          method: patch
          path: feeds/{id}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an existing feed item
            description: Update an existing feed item
            requestModels:
              'application/json': UpdateFeedItemRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEEDITEMS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEEDITEMS_TABLE}/index/${self:provider.environment.FEEDITEMS_INDEX_NAME}

  # Configure DeleteFeedItem function
  DeleteFeed:
    handler: src/lambda/http/deleteFeedItem.handler
    events:
      - http:
          method: delete
          path: feeds/{id}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEEDITEMS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEEDITEMS_TABLE}/index/${self:provider.environment.FEEDITEMS_INDEX_NAME}
      

  # Configure GenerateUploadUrl function
  GenUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: get
          path: feeds/upload-url/{fileName}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.FEEDITEM_IMAGES_S3_BUCKET}/*

resources:
  Resources:
    # AWS resources
    
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USERS_INDEX_NAME}
            KeySchema:
            - AttributeName: email
              KeyType: HASH
            Projection:
              ProjectionType: ALL

    FeedItemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: feedItemId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.FEEDITEMS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.FEEDITEMS_INDEX_NAME}
            KeySchema:
            - AttributeName: feedItemId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.FEEDITEM_IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - 
              AllowedOrigins:
                - '*' 
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.FEEDITEM_IMAGES_S3_BUCKET}/*'  
        Bucket: !Ref ImagesBucket